buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
  }
}

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

version = "0.1"
group = "com.example.gradle.maven"

apply plugin: "java"
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.bintray"

task sourcesJar(type: Jar) { // ソースコードJARの作成タスク
  from sourceSets.main.allJava // ソースセットを入力ファイルに設定
  classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) { // Javadoc JARの作成タスク
  classifier 'javadoc'
  from javadoc.destinationDir // Javadocのターゲットディレクトリを入力ファイルに設定
}

jar.dependsOn sourcesJar, javadocJar // jarタスク実行時にソースコードJARとJavadoc JARも作成する

// BintrayのREST APIを叩いてアップロードしたモジュールに署名するタスク
task signBintrayPackage << {
  final http = new HTTPBuilder(bintray.apiUrl) // 「bintray」はBintrayプラグインにより設定されるプロパティ

  // BASIC認証
  http.auth.basic bintrayUser, bintrayKey

  // BintrayのREST APIに対するリクエスト
  http.request(POST, JSON) {
    uri.path = "/gpg/${bintrayUser}/${bintray.pkg.repo}/${bintray.pkg.name}/versions/${project.version}"
    body = [passphrase: signKeyPassphrase]
    response.success = { resp ->
      logger.info("Signed version ${project.version}.")
    }
    response.failure = { resp ->
      throw new GradleException("Could not sign version ${project.version}: $resp.statusLine")
    }
  }
}

publishing {
  publications {
    mod1(MavenPublication) {
      from components.java
      artifact sourcesJar // ソースコードJARをモジュールに含める
      artifact javadocJar // Javadoc JARをモジュールに含める

      final customPom = { // Mavenセントラルリポジトリが要求するPOM
        packaging "jar"
        name "Gradle XXX Plugin"
        url "https://example.com/module-site/xxx"
        description "This is a sample module for mvn central."
        licenses {
          license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
          }
        }
        scm {
          url "https://github.com/xxx/xxx"
          connection "https://github.com/xxx/xxx"
        }
        developers {
          developer {
            id "my-name-id"
            name "Taro Gradle"
            email "xxx@example.com"
          }
        }
      }
      customPom.resolveStrategy = Closure.DELEGATE_FIRST

      pom.withXml { xml ->
        final root = xml.asNode()
        root.children().last() + customPom
      }
    }
  }
}

bintray {
  user = bintrayUser
  key = bintrayKey
  publications = ["mod1"]
  pkg {
    repo = "test1"
    name = "my-pkg-2"
  }
}

